{
  "openapi": "3.0.3",
  "info": {
    "title": "[Project Name] API",
    "description": "API specification for [Project Name]. This document defines all endpoints, request/response schemas, authentication, and error handling.\n\n**Base URL**: `https://api.example.com/v1`\n\n**Authentication**: All endpoints require Bearer token authentication unless marked as public.\n\n**Rate Limiting**: 100 requests per minute per user, 1000 requests per minute per IP.\n\n**Versioning**: API version is in the URL path (/v1/, /v2/, etc). Breaking changes will increment the version.",
    "version": "1.0.0",
    "contact": {
      "name": "API Support",
      "email": "api-support@example.com",
      "url": "https://developer.example.com"
    },
    "license": {
      "name": "Proprietary",
      "url": "https://example.com/license"
    }
  },
  "servers": [
    {
      "url": "https://api.example.com/v1",
      "description": "Production server"
    },
    {
      "url": "https://api-staging.example.com/v1",
      "description": "Staging server"
    },
    {
      "url": "http://localhost:5000/v1",
      "description": "Local development server"
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "User authentication and authorization endpoints"
    },
    {
      "name": "Users",
      "description": "User management endpoints"
    },
    {
      "name": "Orders",
      "description": "Order management endpoints"
    },
    {
      "name": "Products",
      "description": "Product catalog endpoints"
    },
    {
      "name": "Health",
      "description": "System health and status endpoints"
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "tags": ["Health"],
        "summary": "Health check",
        "description": "Returns the health status of the API. Used by load balancers and monitoring systems.",
        "operationId": "getHealth",
        "security": [],
        "responses": {
          "200": {
            "description": "Service is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                },
                "example": {
                  "status": "healthy",
                  "timestamp": "2024-01-15T10:30:00Z",
                  "version": "1.0.0",
                  "services": {
                    "database": "healthy",
                    "cache": "healthy",
                    "queue": "healthy"
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service is unhealthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                },
                "example": {
                  "status": "unhealthy",
                  "timestamp": "2024-01-15T10:30:00Z",
                  "version": "1.0.0",
                  "services": {
                    "database": "unhealthy",
                    "cache": "healthy",
                    "queue": "degraded"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "User login",
        "description": "Authenticates a user with email and password. Returns JWT access token and refresh token.",
        "operationId": "login",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              },
              "example": {
                "email": "user@example.com",
                "password": "SecurePassword123!"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                },
                "example": {
                  "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                  "refreshToken": "def502004c8b3a6...",
                  "expiresIn": 900,
                  "tokenType": "Bearer",
                  "user": {
                    "userId": "123e4567-e89b-12d3-a456-426614174000",
                    "email": "user@example.com",
                    "firstName": "John",
                    "lastName": "Doe",
                    "roles": ["user"]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": "AUTH001",
                    "message": "Invalid email or password",
                    "details": [],
                    "timestamp": "2024-01-15T10:30:00Z",
                    "traceId": "abc123"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Refresh access token",
        "description": "Obtains a new access token using a valid refresh token.",
        "operationId": "refreshToken",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenRequest"
              },
              "example": {
                "refreshToken": "def502004c8b3a6..."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired refresh token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["Authentication"],
        "summary": "User logout",
        "description": "Invalidates the current access token and refresh token.",
        "operationId": "logout",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Logout successful"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["Users"],
        "summary": "List users",
        "description": "Retrieves a paginated list of users. Requires admin role.",
        "operationId": "listUsers",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageParam"
          },
          {
            "$ref": "#/components/parameters/PageSizeParam"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term for email, first name, or last name",
            "schema": {
              "type": "string",
              "maxLength": 100
            }
          },
          {
            "name": "isActive",
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort by",
            "schema": {
              "type": "string",
              "enum": ["email", "firstName", "lastName", "createdAt"],
              "default": "createdAt"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserListResponse"
                },
                "example": {
                  "data": [
                    {
                      "userId": "123e4567-e89b-12d3-a456-426614174000",
                      "email": "user1@example.com",
                      "firstName": "John",
                      "lastName": "Doe",
                      "isActive": true,
                      "isEmailVerified": true,
                      "createdAt": "2024-01-01T00:00:00Z",
                      "roles": ["user"]
                    }
                  ],
                  "pagination": {
                    "page": 1,
                    "pageSize": 20,
                    "totalPages": 5,
                    "totalItems": 100,
                    "hasNext": true,
                    "hasPrevious": false
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      },
      "post": {
        "tags": ["Users"],
        "summary": "Create user",
        "description": "Creates a new user account. Requires admin role.",
        "operationId": "createUser",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              },
              "example": {
                "email": "newuser@example.com",
                "password": "SecurePassword123!",
                "firstName": "Jane",
                "lastName": "Smith",
                "phoneNumber": "+1234567890",
                "roles": ["user"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "headers": {
              "Location": {
                "description": "URL of the created user",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                },
                "example": {
                  "userId": "123e4567-e89b-12d3-a456-426614174001",
                  "email": "newuser@example.com",
                  "firstName": "Jane",
                  "lastName": "Smith",
                  "phoneNumber": "+1234567890",
                  "isActive": true,
                  "isEmailVerified": false,
                  "createdAt": "2024-01-15T10:30:00Z",
                  "roles": ["user"]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "description": "User with this email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": "USER001",
                    "message": "User with this email already exists",
                    "details": [
                      {
                        "field": "email",
                        "message": "Email 'newuser@example.com' is already registered"
                      }
                    ],
                    "timestamp": "2024-01-15T10:30:00Z",
                    "traceId": "abc123"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user by ID",
        "description": "Retrieves a specific user by their ID. Users can retrieve their own profile, admins can retrieve any user.",
        "operationId": "getUserById",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update user",
        "description": "Updates an existing user. Users can update their own profile, admins can update any user.",
        "operationId": "updateUser",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdParam"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              },
              "example": {
                "firstName": "Jane",
                "lastName": "Smith",
                "phoneNumber": "+1234567890"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete user",
        "description": "Soft deletes a user (sets isActive to false). Requires admin role. Hard delete happens after retention period.",
        "operationId": "deleteUser",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdParam"
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT access token obtained from /auth/login endpoint"
      }
    },
    "parameters": {
      "UserIdParam": {
        "name": "userId",
        "in": "path",
        "required": true,
        "description": "Unique identifier of the user",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "PageParam": {
        "name": "page",
        "in": "query",
        "description": "Page number (1-based)",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 1
        }
      },
      "PageSizeParam": {
        "name": "pageSize",
        "in": "query",
        "description": "Number of items per page",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100,
          "default": 20
        }
      }
    },
    "schemas": {
      "HealthResponse": {
        "type": "object",
        "required": ["status", "timestamp", "version"],
        "properties": {
          "status": {
            "type": "string",
            "enum": ["healthy", "degraded", "unhealthy"],
            "description": "Overall health status"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of health check"
          },
          "version": {
            "type": "string",
            "description": "API version"
          },
          "services": {
            "type": "object",
            "description": "Health status of dependent services",
            "additionalProperties": {
              "type": "string",
              "enum": ["healthy", "degraded", "unhealthy"]
            }
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 255,
            "description": "User's email address"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "maxLength": 100,
            "description": "User's password"
          }
        }
      },
      "RefreshTokenRequest": {
        "type": "object",
        "required": ["refreshToken"],
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "Valid refresh token"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "required": ["accessToken", "refreshToken", "expiresIn", "tokenType", "user"],
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "JWT access token"
          },
          "refreshToken": {
            "type": "string",
            "description": "Refresh token for obtaining new access tokens"
          },
          "expiresIn": {
            "type": "integer",
            "description": "Access token expiration time in seconds"
          },
          "tokenType": {
            "type": "string",
            "enum": ["Bearer"],
            "description": "Token type (always Bearer)"
          },
          "user": {
            "$ref": "#/components/schemas/UserResponse"
          }
        }
      },
      "CreateUserRequest": {
        "type": "object",
        "required": ["email", "password", "firstName", "lastName"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 255,
            "description": "User's email address (must be unique)"
          },
          "password": {
            "type": "string",
            "minLength": 12,
            "maxLength": 100,
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])",
            "description": "User's password (min 12 chars, must contain uppercase, lowercase, number, and special character)"
          },
          "firstName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "User's first name"
          },
          "lastName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "User's last name"
          },
          "phoneNumber": {
            "type": "string",
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "description": "Phone number in E.164 format (optional)"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["user", "admin", "manager"]
            },
            "default": ["user"],
            "description": "User roles"
          }
        }
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "User's first name"
          },
          "lastName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "User's last name"
          },
          "phoneNumber": {
            "type": "string",
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "description": "Phone number in E.164 format"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "required": ["userId", "email", "firstName", "lastName", "isActive", "isEmailVerified", "createdAt", "roles"],
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "firstName": {
            "type": "string",
            "description": "User's first name"
          },
          "lastName": {
            "type": "string",
            "description": "User's last name"
          },
          "phoneNumber": {
            "type": "string",
            "description": "User's phone number"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the user account is active"
          },
          "isEmailVerified": {
            "type": "boolean",
            "description": "Whether the email has been verified"
          },
          "lastLoginAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of last login"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of account creation"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of last update"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "User roles"
          }
        }
      },
      "UserListResponse": {
        "type": "object",
        "required": ["data", "pagination"],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationMetadata"
          }
        }
      },
      "PaginationMetadata": {
        "type": "object",
        "required": ["page", "pageSize", "totalPages", "totalItems", "hasNext", "hasPrevious"],
        "properties": {
          "page": {
            "type": "integer",
            "description": "Current page number (1-based)"
          },
          "pageSize": {
            "type": "integer",
            "description": "Items per page"
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages"
          },
          "totalItems": {
            "type": "integer",
            "description": "Total number of items"
          },
          "hasNext": {
            "type": "boolean",
            "description": "Whether there is a next page"
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Whether there is a previous page"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "required": ["error"],
        "properties": {
          "error": {
            "type": "object",
            "required": ["code", "message", "timestamp"],
            "properties": {
              "code": {
                "type": "string",
                "description": "Error code for programmatic error handling"
              },
              "message": {
                "type": "string",
                "description": "Human-readable error message"
              },
              "details": {
                "type": "array",
                "description": "Additional error details (e.g., validation errors)",
                "items": {
                  "type": "object",
                  "properties": {
                    "field": {
                      "type": "string",
                      "description": "Field that caused the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message for this field"
                    }
                  }
                }
              },
              "timestamp": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp of the error"
              },
              "traceId": {
                "type": "string",
                "description": "Trace ID for debugging"
              }
            }
          }
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request - validation error or malformed request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "error": {
                "code": "VAL001",
                "message": "Validation failed",
                "details": [
                  {
                    "field": "email",
                    "message": "Email is required"
                  },
                  {
                    "field": "password",
                    "message": "Password must be at least 12 characters"
                  }
                ],
                "timestamp": "2024-01-15T10:30:00Z",
                "traceId": "abc123"
              }
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized - missing or invalid authentication token",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "error": {
                "code": "AUTH002",
                "message": "Authentication required",
                "details": [],
                "timestamp": "2024-01-15T10:30:00Z",
                "traceId": "abc123"
              }
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden - authenticated but not authorized to perform this action",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "error": {
                "code": "AUTH003",
                "message": "Insufficient permissions",
                "details": [],
                "timestamp": "2024-01-15T10:30:00Z",
                "traceId": "abc123"
              }
            }
          }
        }
      },
      "NotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "error": {
                "code": "RES001",
                "message": "Resource not found",
                "details": [],
                "timestamp": "2024-01-15T10:30:00Z",
                "traceId": "abc123"
              }
            }
          }
        }
      },
      "TooManyRequests": {
        "description": "Too many requests - rate limit exceeded",
        "headers": {
          "X-RateLimit-Limit": {
            "description": "Request limit per time window",
            "schema": {
              "type": "integer"
            }
          },
          "X-RateLimit-Remaining": {
            "description": "Remaining requests in current window",
            "schema": {
              "type": "integer"
            }
          },
          "X-RateLimit-Reset": {
            "description": "Time when the rate limit resets (Unix timestamp)",
            "schema": {
              "type": "integer"
            }
          },
          "Retry-After": {
            "description": "Seconds to wait before retrying",
            "schema": {
              "type": "integer"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "error": {
                "code": "RATE001",
                "message": "Rate limit exceeded. Please try again later.",
                "details": [],
                "timestamp": "2024-01-15T10:30:00Z",
                "traceId": "abc123"
              }
            }
          }
        }
      }
    }
  }
}
